openapi: 3.0.1
info:
  title: Job Service
  description: Job Service
  version: 1.0.0
paths:
  /jobs:
    get:
      operationId: findJobs
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/version'
        - $ref: '#/components/parameters/isCleaned'
        - $ref: '#/components/parameters/status'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/shouldReturnTasks'
      summary: find jobs by cercaria
      tags:
        - jobs
      responses:
        200:
          description: Array of jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/job'
        204:
          description: No jobs
    post:
      operationId: createJob
      summary: Creates a new job
      tags:
        - jobs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createJobPayload'
      responses:
        201:
          description: Job created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createJobResponse'
        400:
          description: Invalid request, could not create job
        409:
          description: An ingestion process with the same resourceId/version is already in progress (unique violation).

  /jobs/{jobId}:
    parameters:
      - $ref: '#/components/parameters/jobId'
      - $ref: '#/components/parameters/shouldReturnTasks'
    get:
      operationId: getJob
      summary: Get job by id
      tags:
        - jobs
      responses:
        200:
          description: Job data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
        404:
          description: Job not found
    put:
      operationId: updateJob
      summary: Updates a job
      tags:
        - jobs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateJobPayload'
      responses:
        200:
          description: Job updated successfully
        400:
          description: Invalid request, could not update job
        404:
          description: Job not found
    delete:
      operationId: deleteJob
      summary: Delete a job
      responses:
        200:
          description: Job deleted successfully
        404:
          description: Job not found
        422:
          description: Job have tasks
      tags:
        - jobs

  /jobs/{jobId}/tasks:
    parameters:
      - $ref: '#/components/parameters/jobId'
    get:
      operationId: getTasks
      tags:
        - tasks
      summary: Get all the tasks of a job
      responses:
        200:
          description: Array of tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tasks'
        204:
          description: No tasks
        404:
          description: Job not found
    post:
      operationId: createTask
      tags:
        - tasks
      summary: Create new task for job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/createTaskPayload'
                - type: array
                  items:
                    $ref: '#/components/schemas/createTaskPayload'
      responses:
        200:
          description: Task created successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/createTaskResponse'
                  - $ref: '#/components/schemas/createMultipleTasksResponse'
        404:
          description: No such job in the database

  /jobs/{jobId}/tasks/{taskId}:
    parameters:
      - $ref: '#/components/parameters/jobId'
      - $ref: '#/components/parameters/taskId'
    get:
      operationId: getTask
      summary: Get task by task ID
      responses:
        200:
          description: Requested task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/task'
        404:
          description: No such task in the database
      tags:
        - tasks
    put:
      operationId: updateTask
      summary: Update task by task Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateTaskPayload'
      responses:
        200:
          description: Update task data
        400:
          description: Invalid request, could not update task
        404:
          description: Job/Task not found
      tags:
        - tasks
    delete:
      operationId: deleteTask
      summary: Delete an existing task
      responses:
        200:
          description: task deleted successfully
        404:
          description: Job/Task not found
      tags:
        - tasks

  /jobs/{jobId}/tasksStatus:
    parameters:
      - $ref: '#/components/parameters/jobId'
    get:
      operationId: getTasksStatus
      tags:
        - tasks
      summary: Get all tasks statuses of a job
      responses:
        200:
          description: An object with information about tasks status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskStatus'
        204:
          description: No tasks
        404:
          description: Job not found

  /tasks/find:
    post:
      operationId: findTasks
      summary: return list of matching tasks
      tags:
        - tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/findTaskRequest'
      responses:
        200:
          description: Retrieved matching Tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tasks'
        400:
          description: Invalid request

  /tasks/{jobType}/{taskType}/startPending:
    parameters:
      - $ref: '#/components/parameters/jobType'
      - $ref: '#/components/parameters/taskType'
    post:
      operationId: startPendingTask
      summary: retrive the highest priority pending task and update its status to In-Progress
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/task'
        404:
          description: no pending task availabl
      tags:
        - tasksManagement

  /tasks/findInactive:
    post:
      operationId: findInactiveTasks
      summary: retrive list of inactive task ids
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/findInactiveTasksRequest'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskIdList'
      tags:
        - tasksManagement

  /tasks/releaseInactive:
    post:
      operationId: releaseInactiveTasks
      summary: release inactive tasks and return the ids of the released tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/taskIdList'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskIdList'
      tags:
        - tasksManagement

  /tasks/updateExpiredStatus:
    post:
      operationId: updateExpiredStatus
      summary: update status of open jobs and tasks to "Expired" if their expiration date has passed
      responses:
        200:
          description: OK
      tags:
        - tasksManagement

components:
  parameters:
    jobId:
      in: path
      name: jobId
      description: ID of Job
      required: true
      schema:
        $ref: '#/components/schemas/jobId'
    taskId:
      in: path
      name: taskId
      description: ID of requested task
      required: true
      schema:
        $ref: '#/components/schemas/taskId'
    resourceId:
      in: query
      name: resourceId
      description: Id of resource
      required: false
      schema:
        type: string
    version:
      in: query
      name: version
      description: |
        Version of resource.
        If this parameter is used, the 'resourceId' parameter must be present.
      required: false
      schema:
        type: string
    isCleaned:
      in: query
      name: isCleaned
      description: |
        Whether the job is cleaned or not.
      required: false
      schema:
        type: boolean
    status:
      in: query
      name: status
      description: |
        The status of the job.
      required: false
      schema:
        $ref: '#/components/schemas/status'
    shouldReturnTasks:
      in: query
      name: shouldReturnTasks
      description: |
        Whether the job should return its contained tasks. default=true
      required: false
      schema:
        type: boolean
        default: true
    type:
      in: query
      name: type
      description: |
        The type of the job.
      required: false
      schema:
        type: string
    jobType:
      in: path
      name: jobType
      description: the type of the job
      required: true
      schema:
        type: string
    taskType:
      in: path
      name: taskType
      description: the type of the task
      required: true
      schema:
        type: string

  schemas:
    findTaskRequest:
      type: object
      description: task find model
      properties:
        id:
          $ref: '#/components/schemas/taskId'
        percentage:
          $ref: '#/components/schemas/percentage'
        jobId:
          $ref: '#/components/schemas/jobId'
        creationTime:
          $ref: '#/components/schemas/creationTime'
        updateTime:
          $ref: '#/components/schemas/updateTime'
        description:
          $ref: '#/components/schemas/description'
        type:
          $ref: '#/components/schemas/type'
        reason:
          $ref: '#/components/schemas/reason'
        status:
          $ref: '#/components/schemas/status'
        attempts:
          $ref: '#/components/schemas/attempts'
        parameters:
          $ref: '#/components/schemas/parameters'
      additionalProperties: false
    parameters:
      type: object
    attempts:
      type: number
    type:
      type: string
      maxLength: 250
    reason:
      type: string
      maxLength: 250
    description:
      type: string
      maxLength: 2000
    creationTime:
      type: string
      format: date-time
    updateTime:
      type: string
      format: date-time
    jobId:
      type: string
      format: uuid
    taskId:
      type: string
      format: uuid
    percentage:
      type: integer
      minimum: 0
      maximum: 100
    status:
      type: string
      enum:
        - Pending
        - In-Progress
        - Completed
        - Failed
      example: 'Pending'
    job:
      allOf:
        - properties:
            id:
              $ref: '#/components/schemas/jobId'
        - $ref: '#/components/schemas/createJobPayload'
        - properties:
            created:
              type: string
              format: date-time
            updated:
              type: string
              format: date-time
        - $ref: '#/components/schemas/updateJobPayload'
    tasks:
      type: array
      items:
        $ref: '#/components/schemas/task'
    task:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/taskId'
        jobId:
          $ref: '#/components/schemas/jobId'
        description:
          type: string
        parameters:
          type: object
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/status'
        percentage:
          $ref: '#/components/schemas/percentage'
        reason:
          type: string
        attempts:
          type: number
    createJobPayload:
      type: object
      properties:
        resourceId:
          type: string
          maxLength: 300
        version:
          type: string
          maxLength: 30
        description:
          type: string
          maxLength: 2000
        parameters:
          type: object
        status:
          $ref: '#/components/schemas/status'
        reason:
          type: string
          maxLength: 255
        type:
          type: string
          maxLength: 255
        percentage:
          $ref: '#/components/schemas/percentage'
        priority:
          type: integer
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/createTaskPayload'
      required:
        - resourceId
        - version
        - type
        - parameters
      additionalProperties: false

    createJobResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/jobId'
        taskIds:
          type: array
          items:
            $ref: '#/components/schemas/taskId'
      additionalProperties: false
    updateJobPayload:
      type: object
      properties:
        parameters:
          type: object
        status:
          $ref: '#/components/schemas/status'
        percentage:
          $ref: '#/components/schemas/percentage'
        reason:
          type: string
        isCleaned:
          type: boolean
        priority:
          type: integer
      additionalProperties: false
    createTaskPayload:
      type: object
      properties:
        description:
          type: string
          maxLength: 2000
        parameters:
          type: object
        reason:
          type: string
          maxLength: 255
        percentage:
          $ref: '#/components/schemas/percentage'
        type:
          type: string
          maxLength: 255
        status:
          $ref: '#/components/schemas/status'
        attempts:
          type: integer
      required:
        - parameters
      additionalProperties: false
    createTaskResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/taskId'
    createMultipleTasksResponse:
      type: object
      properties:
        ids:
          type: array
          items:
            $ref: '#/components/schemas/taskId'
    updateTaskPayload:
      type: object
      properties:
        description:
          type: string
        parameters:
          type: object
        status:
          $ref: '#/components/schemas/status'
        percentage:
          $ref: '#/components/schemas/percentage'
        reason:
          type: string
        attempts:
          type: integer
      required:
        - status
      additionalProperties: false
    findInactiveTasksRequest:
      type: object
      properties:
        inactiveTimeSec:
          type: integer
        types:
          $ref: '#/components/schemas/taskTypes'
        ignoreTypes:
          $ref: '#/components/schemas/taskTypes'
      required:
        - inactiveTimeSec
    taskTypes:
      type: array
      items:
        $ref: '#/components/schemas/taskType'
    taskType:
      type: object
      properties:
        jobType:
          type: string
        taskType:
          type: string
    taskIdList:
      type: array
      items:
        $ref: '#/components/schemas/taskId'
    taskStatus:
      type: object
      properties:
        allTasksCompleted:
          type: boolean
        failedTasksCount:
          type: number
        completedTasksCount:
          type: number
        resourceId:
          type: string
        resourceVersion:
          type: string
